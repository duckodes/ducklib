var motionbackground = function () { return { initsnow: function () { function a() { var a = document.createElement("span"), b = Math.floor(Math.random() * c.length); a.innerHTML = c[b], a.className = "snowflake", a.style.left = Math.random() * (window.innerWidth - 75) + "px", a.style.animationDuration = 3 * Math.random() + 10 + "s", a.style.fontSize = 20 * Math.random() + 20 + "px", a.style.transform = "rotate(" + 360 * Math.random() + "deg)", document.body.appendChild(a), setTimeout(function () { a.style.opacity = "0", setTimeout(function () { a.remove() }, 1e3) }, 1e4) } var c = ["\u2746", "\u2745", "\u2740"]; setInterval(function () { a() }, 1500) }, initfontize: function () { function a() { d.clearRect(0, 0, c.width, c.height), f.forEach((a, b) => { d.fillText(a.text, a.x, a.y), (0 > a.x || a.x > c.width - 30) && (a.vx *= -1), (a.y < document.querySelector(".nav").offsetHeight + 15 || a.y > c.height) && (a.vy *= -1), a.x += a.vx, a.y += a.vy; for (let c = b + 1; c < f.length; c++) { const b = f[c], d = b.x - a.x, e = b.y - a.y, g = Math.sqrt(d * d + e * e); if (10 > g) { const c = Math.atan2(e, d), f = .5 * Math.cos(c), h = .5 * Math.sin(c), i = (10 - g) * f, j = (10 - g) * h; a.vx -= i, a.vy -= j, b.vx += i, b.vy += j } } }) } function b() { a(), requestAnimationFrame(b) } const c = document.createElement("canvas"); c.style.position = "fixed", c.style.bottom = "0", c.style.zIndex = "-999", document.body.appendChild(c); const d = c.getContext("2d"); c.width = window.innerWidth, c.height = window.innerHeight; const f = []; (function () { for (let a = 0; 100 > a; a++) { const a = Math.random() * c.width, b = Math.random() * c.height, e = 2 * Math.random() - 1, g = 2 * Math.random() - 1, h = String.fromCharCode(65 + Math.floor(26 * Math.random())); f.push({ x: a, y: b, vx: e, vy: g, text: h }), d.font = `${15}px Arial`, d.fillStyle = "#00000020" } })(), b(), document.addEventListener("mousemove", a => { const b = a.clientX, c = a.clientY; f.forEach(a => { const d = Math.sqrt((b - a.x) ** 2 + (c - a.y) ** 2); if (50 > d) { const d = Math.atan2(c - a.y, b - a.x); a.vx = 2 * Math.cos(d), a.vy = 2 * Math.sin(d) } const e = Math.atan2(c - a.y, b - a.x); a.vx = 2 * Math.cos(e), a.vy = 2 * Math.sin(e) }) }), document.addEventListener("mousedown", a => { const b = a.clientX, c = a.clientY; f.forEach(() => { }) }), window.addEventListener("resize", () => { c.width = window.innerWidth, c.height = window.innerHeight, d.font = `${15}px Arial`, d.fillStyle = "#00000020" }) }, initdotor: function (a, b) { function c() { e.clearRect(0, 0, d.width, d.height), f.forEach(a => { a.update(), a.draw() }), requestAnimationFrame(c) } const d = document.createElement("canvas"); d.style.position = "fixed", d.style.bottom = "0", d.style.zIndex = "-999", document.body.appendChild(d); const e = d.getContext("2d"); d.width = window.innerWidth, d.height = window.innerHeight; let f = []; const g = { x: null, y: null, radius: 150 }; window.addEventListener("mousemove", a => { g.x = a.x, g.y = a.y }); class h { constructor(a, b, c) { this.x = a, this.y = b, this.size = c, this.baseX = this.x, this.baseY = this.y, this.density = 30 * Math.random() + 1 } update() { const a = g.x - this.x, b = g.y - this.y, c = Math.sqrt(a * a + b * b), d = g.radius, e = (d - c) / d, f = a / c * e * this.density, h = b / c * e * this.density; if (c < g.radius) this.x -= f, this.y -= h; else { if (this.x !== this.baseX) { const a = this.x - this.baseX; this.x -= a / 10 } if (this.y !== this.baseY) { const a = this.y - this.baseY; this.y -= a / 10 } } } draw() { e.beginPath(), e.arc(this.x, this.y, this.size, 0, 2 * Math.PI); const c = e.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size); c.addColorStop(0, a), c.addColorStop(.8, b), e.fillStyle = c, e.fill() } } (function () { for (let a = 0; 100 > a; a++) { const a = Math.random() * d.width, b = Math.random() * d.height, c = 5 * Math.random() + 1; f.push(new h(a, b, c)) } })(), c(), window.addEventListener("resize", () => { d.width = window.innerWidth, d.height = window.innerHeight }) }, initdotliner: function (a, b) { function c(a, b) { j[a] || (j[a] = []), j[b] || (j[b] = []), j[a].push(b), j[b].push(a) } function d() { for (let a = 0; 100 > a; a++) { const a = Math.random() * f.width, b = Math.random() * f.height, c = 5 * Math.random() + 1; h.push(new k(a, b, c)) } } function e() { g.clearRect(0, 0, f.width, f.height), h.forEach(a => { a.update(), a.draw() }), h.forEach((b, d) => { for (let e = d + 1; e < h.length; e++) { const d = b.x - h[e].x, f = b.y - h[e].y, i = Math.sqrt(d * d + f * f); 100 > i && (g.beginPath(), g.strokeStyle = a, g.lineWidth = .1, g.moveTo(b.x, b.y), g.lineTo(h[e].x, h[e].y), g.stroke(), c(b, h[e])) } }), requestAnimationFrame(e) } const f = document.createElement("canvas"); f.style.position = "fixed", f.style.bottom = "0", f.style.zIndex = "-999", document.body.appendChild(f); const g = f.getContext("2d"); f.width = window.innerWidth, f.height = window.innerHeight; let h = []; const i = { x: null, y: null, radius: 150 }; window.addEventListener("mousemove", a => { i.x = a.x, i.y = a.y }); const j = {}; class k { constructor(a, b, c) { this.x = a, this.y = b, this.size = c, this.baseX = this.x, this.baseY = this.y, this.density = 30 * Math.random() + 1 } update() { const a = i.x - this.x, b = i.y - this.y, c = Math.sqrt(a * a + b * b), d = i.radius, e = (d - c) / d, f = a / c * e * this.density, g = b / c * e * this.density; if (c < i.radius) this.x -= f, this.y -= g; else { if (this.x !== this.baseX) { const a = this.x - this.baseX; this.x -= a / 10 } if (this.y !== this.baseY) { const a = this.y - this.baseY; this.y -= a / 10 } } } draw() { g.beginPath(), g.arc(this.x, this.y, this.size, 0, 2 * Math.PI); const c = g.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size); c.addColorStop(0, a), c.addColorStop(.8, b), g.fillStyle = c, g.fill() } } d(), e(), window.addEventListener("resize", () => { clearTimeout(window.resizedFinished), window.resizedFinished = setTimeout(function () { setTimeout(() => { f.width = window.innerWidth, f.height = window.innerHeight, h = [], d() }, 200) }, 200) }) } } }();